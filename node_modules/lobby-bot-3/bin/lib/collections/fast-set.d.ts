declare type ID = string | number;
export declare class FastSet<T> {
    private hash;
    private shadow;
    constructor(hash: (obj: T) => ID, ...objs: Array<T>);
    getID(): ID;
    add(...objs: Array<T>): boolean;
    remove(obj: T): boolean;
    has(obj: T): boolean;
    size(): number;
    values(): Array<T>;
    map<T2>(fn: (obj: T) => T2): T2[];
    filter(fn: (obj: T) => boolean): T[];
    [Symbol.iterator](): IterableIterator<T>;
}
export declare class StrongSet<T extends {
    id: ID;
}> extends FastSet<T> {
    constructor(...objs: Array<T>);
}
export declare class GetStrongSet<T extends {
    getID: () => ID;
}> extends FastSet<T> {
    constructor(...objs: Array<T>);
}
export {};

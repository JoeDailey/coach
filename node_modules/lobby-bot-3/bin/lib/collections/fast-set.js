"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetStrongSet = exports.StrongSet = exports.FastSet = void 0;
class FastSet {
    constructor(hash, ...objs) {
        this.hash = hash;
        this.shadow = new Map();
        this.add(...objs);
    }
    getID() {
        return this.map(t => this.hash(t)).sort().join('+');
    }
    add(...objs) {
        let changed = false;
        for (const obj of objs) {
            const id = this.hash(obj);
            if (!this.shadow.has(id)) {
                this.shadow.set(id, obj);
                changed = true;
            }
        }
        return changed;
    }
    remove(obj) {
        return this.shadow.delete(this.hash(obj));
    }
    has(obj) {
        return this.shadow.has(this.hash(obj));
    }
    size() {
        return this.shadow.size;
    }
    values() {
        return Array.from(this.shadow.values());
    }
    map(fn) {
        const out = [];
        for (let [id, t] of this.shadow) {
            out.push(fn(t));
        }
        return out;
    }
    filter(fn) {
        const out = [];
        for (let [_id, t] of this.shadow) {
            fn(t) && out.push(t);
        }
        return out;
    }
    [Symbol.iterator]() {
        return this.shadow.values()[Symbol.iterator]();
    }
}
exports.FastSet = FastSet;
class StrongSet extends FastSet {
    constructor(...objs) {
        super(obj => obj.id);
        this.add(...objs);
    }
}
exports.StrongSet = StrongSet;
class GetStrongSet extends FastSet {
    constructor(...objs) {
        super(obj => obj.getID());
        this.add(...objs);
    }
}
exports.GetStrongSet = GetStrongSet;
//# sourceMappingURL=fast-set.js.map
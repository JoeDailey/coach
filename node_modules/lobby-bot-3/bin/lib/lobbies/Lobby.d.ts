import { APIUser } from "discord-api-types/payloads/v9";
import { User, TextChannel, ThreadChannel, MessageEmbedOptions, GuildMember } from "discord.js";
import { Match } from "./Versus";
export declare type Channel = TextChannel | ThreadChannel;
export declare type Player = User | APIUser | GuildMember;
export declare class Lobby {
    readonly id: string;
    private name;
    private min;
    private max;
    private teams;
    private players;
    private readies;
    private constructor();
    static get(channel: Channel): Promise<Lobby>;
    private static load;
    static create(id: string, name: string, min: number, max?: number | null, teams?: number[]): Promise<Lobby>;
    addPlayers(...players: Array<Player>): Promise<void>;
    readyPlayers(...players: Array<Player>): Promise<void>;
    removePlayers(...players: Array<Player>): Promise<void>;
    unreadyPlayers(...players: Array<Player>): Promise<void>;
    updateSettings(settings: {
        name?: string;
        min?: number;
        max?: number;
        teams?: Array<number>;
    }): Promise<void>;
    private destroyReadyCache;
    isReady(): boolean;
    getTeams(): number[];
    getReadies(): string[];
    getShuffle(): Promise<Match>;
    getShufflesAndIndex(): Promise<[Array<Match>, number]>;
    private getSplit;
    print(channel: Channel, update?: string | null, mention?: boolean): Promise<{
        embeds: MessageEmbedOptions[];
    }>;
    printSettings(channel: Channel): Promise<{
        embeds: MessageEmbedOptions[];
    }>;
    printMatch(channel: Channel, match: Match): Promise<{
        embeds: MessageEmbedOptions[];
    }>;
}

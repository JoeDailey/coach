"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTeams = exports.build = void 0;
const discord_slash_1 = require("discord-slash");
const lobbies_1 = require("../../lobbies");
const language_1 = require("../../language");
exports.default = new discord_slash_1.SlashSubcommand("edit", "Edit the lobby settings", handle, build);
function build(cmd) {
    return cmd
        .addStringOption(name => name
        .setName('name')
        .setDescription('Customize the lobby name'))
        .addIntegerOption(min => min
        .setName('min')
        .setDescription('Requir a number of players'))
        .addIntegerOption(max => max
        .setName('max')
        .setDescription('Limit the number of players'))
        .addStringOption(teams => teams
        .setName('teams')
        .setDescription('Set team sizes, e.g. [4,4] or [1,2,3]'));
}
exports.build = build;
async function handle(interaction) {
    const channel = interaction.channel;
    const lobby = await lobbies_1.Lobby.get(channel);
    lobby.updateSettings({
        name: interaction.options.getString('name'),
        min: interaction.options.getInteger('min'),
        max: interaction.options.getInteger('max'),
        teams: parseTeams(interaction.options.getString('teams')),
    });
    await interaction.reply(await lobby.printSettings(channel));
}
function parseTeams(raw) {
    if (!raw)
        return;
    const teams = JSON.parse(raw);
    if (!Array.isArray(teams)) {
        throw (0, language_1.toUser)("Team Setting Invalid");
    }
    for (const team of teams) {
        if (!Number.isInteger(team) || team < 1) {
            throw (0, language_1.toUser)("Team Setting Invalid");
        }
    }
    return teams;
}
exports.parseTeams = parseTeams;
//# sourceMappingURL=edit.js.map
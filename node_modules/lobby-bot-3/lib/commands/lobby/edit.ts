import { SlashSubcommand } from "discord-slash"
import { CommandInteraction, TextChannel } from "discord.js"
import { Channel, Lobby } from "../../lobbies"
import { SlashCommandSubcommandBuilder } from "@discordjs/builders";
import { toUser } from "../../language";

export default new SlashSubcommand(
  "edit",
  "Edit the lobby settings",
  handle,
  build,
);

export function build(cmd: SlashCommandSubcommandBuilder) {
  return cmd
  .addStringOption(name => name
    .setName('name')
    .setDescription('Customize the lobby name')
  )
  .addIntegerOption(min => min
    .setName('min')
    .setDescription('Requir a number of players')
  )
  .addIntegerOption(max => max
    .setName('max')
    .setDescription('Limit the number of players')
  )
  .addStringOption(teams => teams
    .setName('teams')
    .setDescription('Set team sizes, e.g. [4,4] or [1,2,3]')
  );
}

async function handle(interaction: CommandInteraction) {
  const channel = interaction.channel as Channel;
  const lobby = await Lobby.get(channel);  
  lobby.updateSettings({
    name: interaction.options.getString('name'),
    min: interaction.options.getInteger('min'),
    max: interaction.options.getInteger('max'),
    teams: parseTeams(interaction.options.getString('teams')),
  });
  await interaction.reply(await lobby.printSettings(channel));
}

export function parseTeams(raw: string | null): null | Array<number> {
  if (!raw) return;

  const teams = JSON.parse(raw);
  if (!Array.isArray(teams)) {
    throw toUser("Team Setting Invalid");
  }

  for (const team of teams) {
    if (!Number.isInteger(team) || team < 1) {
      throw toUser("Team Setting Invalid");
    }
  }

  return teams;
}

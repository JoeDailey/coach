import { EmbedField, Message, MessageOptions } from "discord.js";
import { configs } from "../language";

export function toUser(type: keyof typeof configs, ...args: any[]): UsageException {
  return new UsageException(type, args);
}

export class UsageException extends Error {
  constructor(readonly type: keyof typeof configs, readonly args: any[]) {
    super(`UsageException: ${type}, ${configs[type].description}`);
    Object.setPrototypeOf(this, new.target.prototype);
  }

  public async printMessage(): Promise<MessageOptions> {
    const config = configs[this.type] as Config;
    return {embeds: [{
      title: "Command Failed",
      color: "RED",
      description: config.description,
      fields: config.fields?.call(config) ?? null,
      footer: {text: "Use !help to learn more"},
    }]}
  }
}

type Config = {
  description: string,
  fields: (msg: Message) => Array<EmbedField>,
}


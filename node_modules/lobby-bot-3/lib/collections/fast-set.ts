type ID = string | number;

/**
 * FastSet is just a set that uses an explicit hash
 * function. Perhaps "fast" ins't the right word, but
 * odds are if you're using this, it's because you know
 * how to identify your objects quickly. If you objects
 * have an `id` property, see StrongSet.
 */
export class FastSet<T> {
  private shadow: Map<ID, T> = new Map();

  constructor(
    private hash: (obj: T) => ID,
    ...objs: Array<T>
  ) {
    this.add(...objs);
  }

  public getID(): ID {
    return this.map(t => this.hash(t)).sort().join('+');
  }

  add(...objs: Array<T>): boolean {
    let changed = false;
    for (const obj of objs) {
      const id = this.hash(obj);
      if (!this.shadow.has(id)) {
        this.shadow.set(id, obj);
        changed = true;
      }
    }
    return changed;
  }

  remove(obj: T): boolean {
    return this.shadow.delete(this.hash(obj));
  }

  has(obj: T): boolean {
    return this.shadow.has(this.hash(obj));
  }

  size(): number {
    return this.shadow.size;
  }

  values(): Array<T> {
    return Array.from(this.shadow.values());
  }

  map<T2>(fn: (obj: T) => T2): T2[] {
    const out = [];
    for (let [id, t] of this.shadow) {
      out.push(fn(t));
    }
    return out;
  }

  filter(fn: (obj: T) => boolean): T[] {
    const out = [];
    for (let [_id, t] of this.shadow) {
      fn(t) && out.push(t);
    }
    return out;
  }

  [Symbol.iterator](): IterableIterator<T> {
    return this.shadow.values()[Symbol.iterator]();
  }
}

/**
 * StrongSet is just a version of FastSet for objects with
 * a literal ID property.
 */
export class StrongSet<T extends {id: ID}> extends FastSet<T> {
  constructor(...objs: Array<T>) {
    super(obj => obj.id);
    this.add(...objs);
  }
}

/**
 * StrongSet is just a version of FastSet for objects with
 * a getID function property.
 */
 export class GetStrongSet<T extends {getID: () => ID}> extends FastSet<T> {
  constructor(...objs: Array<T>) {
    super(obj => obj.getID());
    this.add(...objs);
  }
}
jest.mock('ioredis', () => require('ioredis-mock/jest'));

import { Mock } from '../../mock/discord.js';
import { UsageException } from '../../language';
import { Lobby } from "../Lobby";
import { User } from 'discord.js';

const client = Mock.Client({intents:[]});
              
const guild = Mock.Guild(client, {id: 'guild1', unavailable: false});
const channel =  Mock.TextChannel(guild, {id: 'channel1', type: 0, name: 'channel1'});

let userID = 0;
function user(): User {
  const id = `${userID++}`;
  return Mock.User(client, {id, username:id});
}

function users(count: number): User[] {
  return Array(count).fill(null).map(user);
}

let id = 0;
async function lobbi(settings: {
  name?: string,
  min?: number,
  max?: number,
  teams?: number[],
} = {}) {
  const name = settings.name ?? String(++id);
  return await Lobby.create(
    name,
    name,
    settings.min ?? 2,
    settings.max ?? null,
    settings.teams ?? [],
  );
}

test("Shuffles [1,1]", async () => {
  const lobby = await lobbi({teams: [1, 1]});
  await lobby.readyPlayers(user(),user());
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(2);
  expect(shuffle[0].length).toBe(1);
  expect(shuffle[1].length).toBe(1);
});

test("Shuffles [4,4]", async () => {
  const lobby = await lobbi({teams: [4, 4]});
  await lobby.readyPlayers(...users(8));
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(2);
  expect(shuffle[0].length).toBe(4);
  expect(shuffle[1].length).toBe(4);
});

test("Shuffles [4,4] without enough players", async () => {
  const lobby = await lobbi({teams: [4, 4]});
  await lobby.readyPlayers(...users(5));
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(2);
  expect(shuffle[0].length).toBe(3);
  expect(shuffle[1].length).toBe(2);
});

test("Shuffles [2,2] with too many players", async () => {
  const lobby = await lobbi({teams: [2, 2]});
  await lobby.readyPlayers(...users(6));
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(2);
  expect(shuffle[0].length).toBe(2);
  expect(shuffle[1].length).toBe(2);
});

test("Shuffles [1,5]", async () => {
  const lobby = await lobbi({teams: [1, 5]});
  await lobby.readyPlayers(...users(6));
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(2);
  expect(shuffle[0].length).toBe(1);
  expect(shuffle[1].length).toBe(5);
});

test("Shuffles [1,5] without enough players", async () => {
  const lobby = await lobbi({teams: [1, 5]});
  await lobby.readyPlayers(...users(3));
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(2);
  expect(shuffle[0].length).toBe(1);
  expect(shuffle[1].length).toBe(2);
});

test("Shuffles [1,2,3,4]", async () => {
  const lobby = await lobbi({teams: [1, 2, 3, 4]});
  await lobby.readyPlayers(...users(10));
  const shuffle = [...await lobby.getShuffle()];
  expect(shuffle.length).toBe(4);
  expect(shuffle[0].length).toBe(1);
  expect(shuffle[1].length).toBe(2);
  expect(shuffle[2].length).toBe(3);
  expect(shuffle[3].length).toBe(4);
});

test("Shuffles none ready throws", async () => {
  let lobby = await lobbi({teams: [1,1]});
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles null throws", async () => {
  let lobby = await lobbi({teams: null});
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles [] throws", async () => {
  let lobby = await lobbi({teams:  []});
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles [n] throws", async () => {
  let lobby = await lobbi({teams: [1]});
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles [0, n] throws", async () => {
  let lobby = await lobbi({teams: [0, 1]});
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles [-n] throws", async () => {
  let lobby = await lobbi({teams: [-1, 1]});
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles no symetric duplicates", async () => {
  let lobby = await lobbi({teams: [1, 1]});
  await lobby.readyPlayers(user(), user());
  await lobby.getShuffle();
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});

test("Shuffles 4,4 is 35", async () => {
  let lobby = await lobbi({teams: [4, 4]});
  await lobby.readyPlayers(...users(8));
  for (let i=1; i<36; i++)
    await lobby.getShuffle();
  await expect(async () => await lobby.getShuffle())
    .rejects.toThrowError(UsageException);
});